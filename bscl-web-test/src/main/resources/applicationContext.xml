<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
	   http://www.springframework.org/schema/aop
      http://www.springframework.org/schema/aop/spring-aop.xsd"
       default-lazy-init="false">

    <aop:aspectj-autoproxy></aop:aspectj-autoproxy>
    <context:component-scan base-package="org.bscl.web.*">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
    </context:component-scan>


    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:spring-mybatis.xml"/>
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
    </bean>

    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg ref="sqlSessionFactory"/>
    </bean>

    <bean id="manyDataSourceAspect" class="org.bscl.web.db.DataSourceAspect"/>
    <aop:config>
        <aop:aspect id="c" ref="manyDataSourceAspect">
            <aop:pointcut id="tx" expression="execution(* org.bscl.web.mapper.*.*(..))"/>
            <aop:before pointcut-ref="tx" method="before"/>
        </aop:aspect>
    </aop:config>

    <bean id="MasterDataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="${karma.mysql.jdbc.url}"/>
        <property name="username" value="${karma.jdbc.username}"/>
        <property name="password" value="${karma.jdbc.password}"/>
        <!-- 初始化连接数量 -->
        <property name="initialSize" value="5"/>
        <!-- 最大活动连接数量 -->
        <property name="maxActive" value="100"/>
        <!-- 最大空闲连接数量 -->
        <property name="maxIdle" value="5"/>
        <!-- 最小空闲连接数量 -->
        <property name="minIdle" value="2"/>
        <!-- 是否自动提交 -->
        <property name="defaultAutoCommit" value="false"/>
        <!-- 空闲连接被回收时间，回收空闲连接至minIdle指定数量，单位毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="1800000"/>
        <!-- 检查空闲连接是否可被回收，如果小于等于0，不会启动检查线程，默认-1，单位毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="120000"/>
        <!-- 在每次空闲连接回收器线程(如果有)运行时检查的连接数量 -->
        <property name="numTestsPerEvictionRun" value="3"/>
        <!-- SQL查询,用来验证从连接池取出的连接 -->
        <property name="validationQuery" value="select 1"/>
        <!-- 指明连接是否被空闲连接回收器(如果有)进行检验.如果检测失败,则连接将被从池中去除 -->
        <property name="testWhileIdle" value="true"/>
        <!-- 指明是否在从池中取出连接前进行检验,如果检验失败, -->
        <property name="testOnBorrow" value="false"/>
        <!-- 指明是否在归还到池中前进行检验 -->
        <property name="testOnReturn" value="false"/>
        <!-- 标记是否删除泄露的连接，设置为true可以为写法糟糕的没有关闭连接的程序修复数据库连接. -->
        <property name="removeAbandoned" value="true"/>
        <!-- 泄露的连接可以被删除的超时值, 单位秒 -->
        <property name="removeAbandonedTimeout" value="180"/>
        <!-- 将会在回收事件后，在log中打印出回收Connection的错误信息，在调试的时候很有用。 -->
        <property name="logAbandoned" value="true"/>
        <!-- 获取连接时等待时间，超出将抛异常，单位毫秒 -->
        <property name="maxWait" value="10000"/>
        <!--<property name="filters" value="stat" />-->
        <!--<property name="connectionProperties" value="druid.stat.slowSqlMillis=3000" />-->
    </bean>

    <bean id="SlaveDataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="${karma.mysql.jdbc.url}"/>
        <property name="username" value="${karma.jdbc.username}"/>
        <property name="password" value="${karma.jdbc.password}"/>
        <!-- 初始化连接数量 -->
        <property name="initialSize" value="5"/>
        <!-- 最大活动连接数量 -->
        <property name="maxActive" value="100"/>
        <!-- 最大空闲连接数量 -->
        <property name="maxIdle" value="5"/>
        <!-- 最小空闲连接数量 -->
        <property name="minIdle" value="2"/>
        <!-- 是否自动提交 -->
        <property name="defaultAutoCommit" value="false"/>
        <!-- 空闲连接被回收时间，回收空闲连接至minIdle指定数量，单位毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="1800000"/>
        <!-- 检查空闲连接是否可被回收，如果小于等于0，不会启动检查线程，默认-1，单位毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="120000"/>
        <!-- 在每次空闲连接回收器线程(如果有)运行时检查的连接数量 -->
        <property name="numTestsPerEvictionRun" value="3"/>
        <!-- SQL查询,用来验证从连接池取出的连接 -->
        <property name="validationQuery" value="select 1"/>
        <!-- 指明连接是否被空闲连接回收器(如果有)进行检验.如果检测失败,则连接将被从池中去除 -->
        <property name="testWhileIdle" value="true"/>
        <!-- 指明是否在从池中取出连接前进行检验,如果检验失败, -->
        <property name="testOnBorrow" value="false"/>
        <!-- 指明是否在归还到池中前进行检验 -->
        <property name="testOnReturn" value="false"/>
        <!-- 标记是否删除泄露的连接，设置为true可以为写法糟糕的没有关闭连接的程序修复数据库连接. -->
        <property name="removeAbandoned" value="true"/>
        <!-- 泄露的连接可以被删除的超时值, 单位秒 -->
        <property name="removeAbandonedTimeout" value="180"/>
        <!-- 将会在回收事件后，在log中打印出回收Connection的错误信息，在调试的时候很有用。 -->
        <property name="logAbandoned" value="true"/>
        <!-- 获取连接时等待时间，超出将抛异常，单位毫秒 -->
        <property name="maxWait" value="10000"/>
        <!--<property name="filters" value="stat" />-->
        <!--<property name="connectionProperties" value="druid.stat.slowSqlMillis=3000" />-->
    </bean>

    <bean id="dataSource" class="org.bscl.web.db.DynamicDataSource">
        <property name="targetDataSources">
            <map key-type="java.lang.String">
                <entry key="master" value-ref="MasterDataSource"/>
                <entry key="slave" value-ref="SlaveDataSource"/>
            </map>
        </property>
        <property name="defaultTargetDataSource" ref="MasterDataSource"/>
    </bean>
    <bean name="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
</beans>